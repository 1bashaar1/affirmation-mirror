{"ast":null,"code":"var _jsxFileName = \"/Users/apple/Downloads/affirmation-mirror/Client/src/components/Recorder.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Recorder = () => {\n  _s();\n  const [audioURL, setAudioURL] = useState('');\n  const [recording, setRecording] = useState(false);\n  const [result, setResult] = useState(null);\n  let mediaRecorder;\n  let audioChunks = [];\n  const startRecording = async () => {\n    const stream = await navigator.mediaDevices.getUserMedia({\n      audio: true\n    });\n    mediaRecorder = new MediaRecorder(stream);\n    mediaRecorder.ondataavailable = e => {\n      audioChunks.push(e.data);\n    };\n    mediaRecorder.onstop = async () => {\n      const audioBlob = new Blob(audioChunks, {\n        type: 'audio/webm'\n      });\n      setAudioURL(URL.createObjectURL(audioBlob));\n      const formData = new FormData();\n      formData.append('audio', audioBlob, 'recording.webm');\n      try {\n        const response = await fetch('http://localhost:5000/api/affirmation', {\n          method: 'POST',\n          body: formData\n        });\n        const data = await response.json();\n        setResult(data.affirmations);\n      } catch (err) {\n        console.error('Upload failed:', err);\n      }\n    };\n    mediaRecorder.start();\n    setRecording(true);\n    setTimeout(() => {\n      mediaRecorder.stop();\n      setRecording(false);\n    }, 5000);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startRecording,\n      disabled: recording,\n      children: recording ? 'Recording...' : 'Start Recording'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), audioURL && /*#__PURE__*/_jsxDEV(\"audio\", {\n      controls: true,\n      src: audioURL\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 20\n    }, this), result && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '10px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Generated Affirmations:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: result\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(Recorder, \"ZWAQqw4gRzY+mtpF17tPj10+hKk=\");\n_c = Recorder;\nexport default Recorder;\nvar _c;\n$RefreshReg$(_c, \"Recorder\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Recorder","_s","audioURL","setAudioURL","recording","setRecording","result","setResult","mediaRecorder","audioChunks","startRecording","stream","navigator","mediaDevices","getUserMedia","audio","MediaRecorder","ondataavailable","e","push","data","onstop","audioBlob","Blob","type","URL","createObjectURL","formData","FormData","append","response","fetch","method","body","json","affirmations","err","console","error","start","setTimeout","stop","children","onClick","disabled","fileName","_jsxFileName","lineNumber","columnNumber","controls","src","style","marginTop","_c","$RefreshReg$"],"sources":["/Users/apple/Downloads/affirmation-mirror/Client/src/components/Recorder.js"],"sourcesContent":["import React, { useState } from 'react';\n\nconst Recorder = () => {\n  const [audioURL, setAudioURL] = useState('');\n  const [recording, setRecording] = useState(false);\n  const [result, setResult] = useState(null);\n\n  let mediaRecorder;\n  let audioChunks = [];\n\n  const startRecording = async () => {\n    const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n    mediaRecorder = new MediaRecorder(stream);\n\n    mediaRecorder.ondataavailable = (e) => {\n      audioChunks.push(e.data);\n    };\n\n    mediaRecorder.onstop = async () => {\n      const audioBlob = new Blob(audioChunks, { type: 'audio/webm' });\n      setAudioURL(URL.createObjectURL(audioBlob));\n\n      const formData = new FormData();\n      formData.append('audio', audioBlob, 'recording.webm');\n\n      try {\n        const response = await fetch('http://localhost:5000/api/affirmation', {\n          method: 'POST',\n          body: formData,\n        });\n\n        const data = await response.json();\n        setResult(data.affirmations);\n      } catch (err) {\n        console.error('Upload failed:', err);\n      }\n    };\n\n    mediaRecorder.start();\n    setRecording(true);\n    setTimeout(() => {\n      mediaRecorder.stop();\n      setRecording(false);\n    }, 5000);\n  };\n\n  return (\n    <div>\n      <button onClick={startRecording} disabled={recording}>\n        {recording ? 'Recording...' : 'Start Recording'}\n      </button>\n\n      {audioURL && <audio controls src={audioURL} />}\n      {result && (\n        <div style={{ marginTop: '10px' }}>\n          <h3>Generated Affirmations:</h3>\n          <pre>{result}</pre>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Recorder;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACO,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACS,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAE1C,IAAIW,aAAa;EACjB,IAAIC,WAAW,GAAG,EAAE;EAEpB,MAAMC,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,MAAMC,MAAM,GAAG,MAAMC,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;MAAEC,KAAK,EAAE;IAAK,CAAC,CAAC;IACzEP,aAAa,GAAG,IAAIQ,aAAa,CAACL,MAAM,CAAC;IAEzCH,aAAa,CAACS,eAAe,GAAIC,CAAC,IAAK;MACrCT,WAAW,CAACU,IAAI,CAACD,CAAC,CAACE,IAAI,CAAC;IAC1B,CAAC;IAEDZ,aAAa,CAACa,MAAM,GAAG,YAAY;MACjC,MAAMC,SAAS,GAAG,IAAIC,IAAI,CAACd,WAAW,EAAE;QAAEe,IAAI,EAAE;MAAa,CAAC,CAAC;MAC/DrB,WAAW,CAACsB,GAAG,CAACC,eAAe,CAACJ,SAAS,CAAC,CAAC;MAE3C,MAAMK,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;MAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEP,SAAS,EAAE,gBAAgB,CAAC;MAErD,IAAI;QACF,MAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAAC,uCAAuC,EAAE;UACpEC,MAAM,EAAE,MAAM;UACdC,IAAI,EAAEN;QACR,CAAC,CAAC;QAEF,MAAMP,IAAI,GAAG,MAAMU,QAAQ,CAACI,IAAI,CAAC,CAAC;QAClC3B,SAAS,CAACa,IAAI,CAACe,YAAY,CAAC;MAC9B,CAAC,CAAC,OAAOC,GAAG,EAAE;QACZC,OAAO,CAACC,KAAK,CAAC,gBAAgB,EAAEF,GAAG,CAAC;MACtC;IACF,CAAC;IAED5B,aAAa,CAAC+B,KAAK,CAAC,CAAC;IACrBlC,YAAY,CAAC,IAAI,CAAC;IAClBmC,UAAU,CAAC,MAAM;MACfhC,aAAa,CAACiC,IAAI,CAAC,CAAC;MACpBpC,YAAY,CAAC,KAAK,CAAC;IACrB,CAAC,EAAE,IAAI,CAAC;EACV,CAAC;EAED,oBACEN,OAAA;IAAA2C,QAAA,gBACE3C,OAAA;MAAQ4C,OAAO,EAAEjC,cAAe;MAACkC,QAAQ,EAAExC,SAAU;MAAAsC,QAAA,EAClDtC,SAAS,GAAG,cAAc,GAAG;IAAiB;MAAAyC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzC,CAAC,EAER9C,QAAQ,iBAAIH,OAAA;MAAOkD,QAAQ;MAACC,GAAG,EAAEhD;IAAS;MAAA2C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAC7C1C,MAAM,iBACLP,OAAA;MAAKoD,KAAK,EAAE;QAAEC,SAAS,EAAE;MAAO,CAAE;MAAAV,QAAA,gBAChC3C,OAAA;QAAA2C,QAAA,EAAI;MAAuB;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAChCjD,OAAA;QAAA2C,QAAA,EAAMpC;MAAM;QAAAuC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChB,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAC/C,EAAA,CA3DID,QAAQ;AAAAqD,EAAA,GAARrD,QAAQ;AA6Dd,eAAeA,QAAQ;AAAC,IAAAqD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}